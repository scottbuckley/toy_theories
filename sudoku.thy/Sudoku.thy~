theory Sudoku
  imports Main
begin

datatype board = This nat nat

definition s :: "board \<Rightarrow> bool" where
  "s b = False"

(* notation s ("dsdf") *)

abbreviation sdf where
  "sdf a b \<equiv> This a b"

lemma sdf:
 " s b"
  apply (cases b, clarsimp)

lemma sdf:
  "\<lbrakk>A; B\<rbrakk> \<Longrightarrow> C"
  oops

lemma sdf:
  "q = (b, c, d)"
  oops

(* datatype cands = Cds bool bool bool bool bool bool bool bool bool *)

datatype cell = 
  Known nat
| Cands "bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool \<times> bool"

nonterminal cds and cand
syntax
  "_known" :: "nat \<Rightarrow> cell" ("||/ / / _/ / / ||")
  (* "_cand" :: "bool \<Rightarrow> cand" (":_:") *)
  (* "_cands" :: "cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cand \<Rightarrow> cell" ("|_ _ _ _ _ _ _ _ _|") *)
translations
  "_known x" \<rightleftharpoons> "CONST Known x"
  (* "_cand b" \<rightleftharpoons> "b" *)

lemma test:
  "Known 5 = Cands (False, False, False, False, True, False, False, False, False)"

  oops


nonterminal tuple_args and patterns

syntax
  "_tuple"      :: "'a \<Rightarrow> tuple_args \<Rightarrow> 'a \<times> 'b"        ("(1'(_,/ _'))")
  "_tuple_arg"  :: "'a \<Rightarrow> tuple_args"                   ("_")
  "_tuple_args" :: "'a \<Rightarrow> tuple_args \<Rightarrow> tuple_args"     ("_,/ _")
  "_pattern"    :: "pttrn \<Rightarrow> patterns \<Rightarrow> pttrn"         ("'(_,/ _')")
  ""            :: "pttrn \<Rightarrow> patterns"                  ("_")
  "_patterns"   :: "pttrn \<Rightarrow> patterns \<Rightarrow> patterns"      ("_,/ _")
  "_unit"       :: pttrn                                ("'(')")
translations
  "(x, y)" \<rightleftharpoons> "CONST Pair x y"
  "_pattern x y" \<rightleftharpoons> "CONST Pair x y"
  "_patterns x y" \<rightleftharpoons> "CONST Pair x y"
  "_tuple x (_tuple_args y z)" \<rightleftharpoons> "_tuple x (_tuple_arg (_tuple y z))"
  "\<lambda>(x, y, zs). b" \<rightleftharpoons> "CONST case_prod (\<lambda>x (y, zs). b)"
  "\<lambda>(x, y). b" \<rightleftharpoons> "CONST case_prod (\<lambda>x y. b)"
  "_abs (CONST Pair x y) t" \<rightharpoonup> "\<lambda>(x, y). t"
  \<comment> \<open>This rule accommodates tuples in \<open>case C \<dots> (x, y) \<dots> \<Rightarrow> \<dots>\<close>:
     The \<open>(x, y)\<close> is parsed as \<open>Pair x y\<close> because it is \<open>logic\<close>,
     not \<open>pttrn\<close>.\<close>
  "\<lambda>(). b" \<rightleftharpoons> "CONST case_unit b"
  "_abs (CONST Unity) t" \<rightharpoonup> "\<lambda>(). t"
















end